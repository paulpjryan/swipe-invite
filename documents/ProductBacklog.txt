Andrew Davis
Kyle Krynski
Paul Ryan
Tejaswi Namuduru
Zening Chen


Product Backlog - Team 16
Project name: SwipeInvite


Problem Statement
There is no mobile application on the market that completely satisfies the need to quickly and efficiently schedule events amongst group members, friend circles, and classmates, allowing them to push and accept calendar events. Similar systems from Google, Facebook, and Upto provide partial systems for managing social environments, but they fail to provide users with customizable transparency, specific scalability, and unique features for the college environment.


Background Information
        The main reason for coming up with a solution to this problem is to allow people to quickly manage scheduled events in their life without dealing with multiple calendars or services. The domain of this problem includes all mobile Android platforms, the current embedded calendar applications in a user’s life, the current social planning applications, and the general event scheduling motif in which user’s operate. Specifically targeted users are college students who need to manage events such as classes, review sessions, homework sessions, callouts, meetings, interviews, parties, and other set social events. However, this user-base could leak over into general use of anyone dealing with group events that are quickly planned verbally, but never accounted for on all of their calendar media. Many other social network and calendar applications address the issue of personal scheduling by providing a robust calendar mechanism with which to schedule your life. Facebook uses the “event” system, Google uses its calendar application, Apple has the iCalendar, and Upto uses its own calendar system. The primary problem with these current applications is that they focus on a “one-in-all” solution to social scheduling. They assume that the user has time to undergo tedious input and management methods, rather than allowing the events to be handled through quick events similar to text messages or verbal conversation. As a result, the user feels labored to input simple events into such robust programs. Our vision is to allow the user to interact with these more robust technologies through a quick, decision based application that does not need to re-implement the various calendar APIs that already exist. Our application will not have a long input or management method, allowing users to use it as if they were verbally communicating, emailing, or texting an event to a group of people. It will have a simplified flow of upcoming events in the near future, and allow users to re-evaluate the need to partake in events as they enter the near future.






Requirements


* Functional Requirements
1. As a team leader, I would like to schedule time that every member in the team is available for meeting by checking and comparing their schedules.
2. As a professor, I would like to find the best office hours that work for most students and notify all students in a manner such that they will actually address it.
3. As a busy person, I would like to be notified / keep track of near-future events simply.
4. As a member of a friend group, I would like to schedule a group study session with my other friends and select the location.
5. As a person whose 21st birthday is in a week, I would like to invite everybody I know and know how many people are going to show up so I know how much cash to bring.
6. As an introvert, I would like to reject an invitation to a party or outing in a non-confrontational manner.
7. As a new college student, I want to get updated organization call out information I am interested in. 
8. As a college student living off campus, I would like to let all my friends in the area know that there is free food somewhere and for a how much time.
9. As a business owner, I would like to be able to send promotional event information to possible local customers.
10. As a working mother, I would like to send my calender to my paid babysitter to let her know when she has to take care of my child.
11. As an organization member, I would like to be able to send organization activity information to students who are interested.
12. As a professor, I would like to set exam and homework reminders to students in a colloquial manner.
13. As a student, I would like to be able to sync all my courses directly into my calendar by simply connect it to my mypurdue account. (if time allows)
14. As a user, I would like to be able to see and resolve conflicts in events that I choose to accept.
15. As a non-profit Community manager, I would like to be able to see charity participants availability for simplified coordination. 
16. As a group leader, I would like to be able to schedule recurring events.
17. As an event creator, I would like to be able to choose who sees how many people have accepted the event.
18. As a non-smartphone user, I would like to be able to make decisions on events by text and have my electronic calendars get updated. (if time allows)
19. As a group leader, I would like to save and load templates for events to send to a group. (if time allows)
20. As a user, I would like to be able to change my account settings (password, email settings)
21. As a user I would like to be able to invite non-app users via email or text message. (if time allows)
22. As a user, I would like to be able to add and remove myself from groups specific to university clubs, organizations, project groups, etc. (if time allows)
23. As a Google Calendar user, I would like to be able to add events to my existing calendar.

________________


   * Non-Functional Requirements
   1. Storage space: many of our users will probably be considered power-users, who want our app to be as space-efficient as possible. We can achieve this by following the thin-client model for our application. We will also save space on the server by deleting the info of events that have passed.

   2. Push notifications: We envision our users only using our application in two situations: creating an event and responding to an invitation, so we will have to notify users right away when they receive an invitation.

   3. Swipe to accept: most users prefer convenience over detail and we hope that this feature will be of high utility. A user will be able to receive invites and swipe to accept or decline an invitation without unlocking their phones. They will be able to view the details of the invitation (host, time, location) in the notification and decide if they want to accept or decline the invitation. 

   4. Security: User person information, passwords, and schedules will need to be hidden from public view.


      1. Scalability: The main part of the system that will need to be scaled is the server, which will essentially become an algorithmic database challenge.

      2. Platform: This application should run on most modern Android smartphones, running Android 4.2 and above.

      3. Reliability: It is important that a user receives every event that they are invited to. We don’t want our users to miss out.

      4. UI: The UI needs to be simple, beautiful, and easy to use. Users won’t want to use an app that looks bad or is not intuitive.

      5. Performance: The client’s response time is more critical than server response time. We don’t want any freezing or crashing.